Search.setIndex({"docnames": ["backward_difference", "basen", "binary", "catboost", "count", "glmm", "gray", "hashing", "helmert", "index", "jamesstein", "leaveoneout", "mestimate", "onehot", "ordinal", "polynomial", "quantile", "rankhot", "sum", "summary", "targetencoder", "woe", "wrapper"], "filenames": ["backward_difference.rst", "basen.rst", "binary.rst", "catboost.rst", "count.rst", "glmm.rst", "gray.rst", "hashing.rst", "helmert.rst", "index.rst", "jamesstein.rst", "leaveoneout.rst", "mestimate.rst", "onehot.rst", "ordinal.rst", "polynomial.rst", "quantile.rst", "rankhot.rst", "sum.rst", "summary.rst", "targetencoder.rst", "woe.rst", "wrapper.rst"], "titles": ["Backward Difference Coding", "BaseN", "Binary", "CatBoost Encoder", "Count Encoder", "Generalized Linear Mixed Model Encoder", "Gray", "Hashing", "Helmert Coding", "Category Encoders", "James-Stein Encoder", "Leave One Out", "M-estimate", "One Hot", "Ordinal", "Polynomial Coding", "Quantile Encoder", "RankHotEncoder", "Sum Coding", "Summary Encoder", "Target Encoder", "Weight of Evidence", "Wrappers"], "terms": {"class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "category_encod": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "backward_differ": 0, "backwarddifferenceencod": [0, 9], "verbos": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "col": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "none": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "map": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "drop_invari": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "fals": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "return_df": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "true": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "handle_unknown": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "valu": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "handle_miss": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "contrast": [0, 8, 13, 14, 15, 18], "encod": [0, 1, 2, 6, 7, 8, 11, 12, 13, 14, 15, 17, 18, 21, 22], "categor": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "variabl": [0, 2, 3, 4, 6, 8, 9, 11, 13, 14, 15, 18], "paramet": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "int": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "integ": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "indic": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "output": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "list": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "column": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "all": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "string": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "bool": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "boolean": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "whether": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "drop": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "varianc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "return": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "panda": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "datafram": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "from": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "transform": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "otherwis": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "numpi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "arrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "str": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "option": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "ar": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "error": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "return_nan": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "default": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "warn": [0, 1, 2, 6, 8, 14, 15, 18], "us": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "an": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "extra": [0, 1, 2, 6, 8, 15, 18], "ad": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "matrix": [0, 1, 2, 6, 8, 15, 18], "ha": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "unknown": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21], "categori": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "can": [0, 1, 2, 4, 6, 8, 9, 10, 13, 14, 15, 17, 18, 20, 22], "caus": [0, 1, 2, 6, 7, 8, 9, 15, 18], "unexpect": [0, 1, 2, 6, 8, 15, 18], "chang": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "dimens": [0, 1, 2, 6, 7, 8, 15, 18], "some": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "case": [0, 1, 2, 4, 6, 8, 14, 15, 16, 18, 20], "nan": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21], "refer": [0, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "system": [0, 8, 13, 14, 15, 18], "http": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22], "stat": [0, 8, 13, 14, 15, 18], "idr": [0, 8, 13, 14, 15, 18], "ucla": [0, 8, 13, 14, 15, 18], "edu": [0, 5, 8, 10, 13, 14, 15, 18], "r": [0, 8, 13, 14, 15, 18], "librari": [0, 5, 7, 8, 9, 13, 14, 15, 18, 22], "2": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 22], "gregori": [0, 8, 13, 14, 15, 18], "carei": [0, 8, 13, 14, 15, 18], "2003": [0, 8, 13, 14, 15, 18], "ibgwww": [0, 8, 13, 14, 15, 18], "colorado": [0, 8, 13, 14, 15, 18], "p5741ndir": [0, 8, 13, 14, 15, 18], "coding_categorical_vari": [0, 8, 13, 14, 15, 18], "pdf": [0, 5, 7, 8, 10, 13, 14, 15, 18, 22], "method": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "fit_contrast_cod": [0, 8, 15, 18], "get_contrast_matrix": [0, 8, 15, 18], "get_feature_nam": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "transform_contrast_cod": [0, 8, 15, 18], "invers": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21], "how": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "handl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22], "miss": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21], "fit": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "time": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "which": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "treat": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21], "countabl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21], "dict": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "label": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22], "behaviour": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21], "specifi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21], "pass": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "fill": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21], "kwarg": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22], "addit": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "specif": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21], "like": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "regularis": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21], "x": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "y": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "accord": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "shape": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "n_sampl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "n_featur": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "train": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "vector": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "where": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "number": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "sampl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "featur": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "target": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22], "self": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "fit_transform": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "fit_param": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "data": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "version": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "input": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "n_output": [0, 1, 2, 4, 6, 7, 8, 13, 14, 15, 17, 18, 22], "unsupervis": [0, 1, 2, 4, 6, 7, 8, 13, 14, 15, 17, 18, 22], "x_new": [0, 1, 2, 4, 6, 7, 8, 13, 14, 15, 17, 18, 22], "ndarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "n_features_new": [0, 1, 2, 4, 6, 7, 8, 13, 14, 15, 17, 18, 22], "get_feature_names_in": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "name": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "present": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "when": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "These": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "necessari": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "step": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "get_feature_names_out": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "input_featur": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "note": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "sklearn": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "function": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "take": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "feature_names_in": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "argument": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "determin": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "A": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "usual": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "so": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "notfittederror": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "rais": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "we": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "just": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "requir": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "feature_nam": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "np": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "potenti": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "becaus": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "constant": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "invari": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "includ": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "get_metadata_rout": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "get": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "metadata": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "rout": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "object": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "pleas": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "check": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "user": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "guid": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "mechan": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "work": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "metadatarequest": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "encapsul": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "inform": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "get_param": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "deep": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "estim": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21], "If": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "contain": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "subobject": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "param": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "set_output": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21], "set": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "see": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "sphx_glr_auto_examples_miscellaneous_plot_set_output": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21], "py": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21], "exampl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21], "api": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22], "configur": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21], "format": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21], "unchang": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "instanc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "set_param": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "simpl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "well": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "nest": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "pipelin": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "latter": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "have": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "form": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "compon": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "__": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "possibl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "updat": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "each": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "set_transform_request": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "override_return_df": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "request": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "onli": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "relev": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "enable_metadata_rout": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "set_config": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "provid": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "ignor": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "meta": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "should": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "given": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "alia": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "instead": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "origin": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "util": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "metadata_rout": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "retain": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "exist": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "allow": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "you": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "other": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "new": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "sub": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "e": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "g": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "insid": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "effect": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "perform": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22], "overrid": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21], "forc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21], "frame": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21], "p": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21], "n_features_out": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21], "appli": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "basenencod": [1, 9], "base": [1, 2, 4, 6, 9, 22], "n": [1, 7, 20, 22], "represent": [1, 19], "equival": [1, 9, 22], "one": [1, 2, 6, 7, 9, 10, 11, 12, 13, 14, 17, 22], "hot": [1, 9, 11, 17], "realli": 1, "binari": [1, 4, 6, 9, 10, 13, 20, 22], "actual": [1, 7, 22], "vanilla": 1, "ordin": [1, 6, 9], "downstream": [1, 22], "model": [1, 9, 10, 22], "cope": 1, "nonlinear": 1, "decis": 1, "tree": [1, 12, 16, 19, 20], "higher": [1, 5, 12, 16, 19, 20], "calc_required_digit": [1, 2, 6], "fit_base_n_encod": [1, 2, 6], "number_to_bas": [1, 2, 6], "basen_encod": [1, 2, 6, 9], "x_in": [1, 2, 6, 7, 13, 14, 17], "code": [1, 2, 6, 9, 11, 13, 14, 21], "per": [1, 2, 5, 6, 13], "digit": [1, 2, 6], "dummi": [1, 2, 6, 13], "basen_to_integ": [1, 2, 6, 9], "convert": [1, 2, 6, 9, 10, 13], "numer": [1, 2, 3, 6, 9, 13, 22], "col_transform": [1, 2, 6, 9], "lambda": [1, 2, 6], "bodi": [1, 2, 6], "inverse_transform": [1, 2, 6, 9, 13, 14, 17], "same": [1, 2, 3, 6, 9, 10, 13, 14], "size": [1, 2, 6, 7, 10, 13, 14], "set_inverse_transform_request": [1, 2, 6, 9, 13, 14, 17], "binaryencod": [2, 9], "similar": [2, 3, 5, 9, 11, 17], "onehot": [2, 13], "store": 2, "bitstr": 2, "basen": [2, 6, 9], "cat_boost": 3, "catboostencod": [3, 9], "random_st": [3, 5, 10, 11, 12, 21, 22], "sigma": [3, 5, 10, 11, 12, 21], "support": [3, 5, 9, 10, 12, 20, 21], "binomi": [3, 5, 10, 12, 20, 21], "continu": [3, 5, 10, 12, 20], "For": [3, 4, 5, 7, 9, 10, 12, 20, 21, 22], "polynomi": [3, 5, 9, 10, 12, 20, 21], "polynomialwrapp": [3, 5, 9, 10, 12, 20, 21, 22], "variat": 3, "It": [3, 7, 19], "awar": 3, "regular": [3, 5, 20, 21], "onlin": 3, "learn": [3, 7, 9, 10], "implement": [3, 5, 7, 22], "has_tim": 3, "random": [3, 5, 10, 12, 14, 21, 22], "permut": 3, "make": [3, 5, 6, 7, 10, 11, 12, 16, 19, 20, 21], "sensit": 3, "order": [3, 5, 9, 10, 11, 12, 14, 16, 20, 21, 22], "suitabl": 3, "seri": [3, 14], "problem": [3, 9, 10, 12, 16, 19, 20], "your": [3, 7, 9], "doe": [3, 7, 10], "depend": [3, 7], "still": 3, "fine": 3, "assum": [3, 14, 21], "sort": 3, "won": 3, "t": [3, 7, 9], "leak": 3, "ani": [3, 7, 9], "outsid": 3, "scope": 3, "leakag": [3, 22], "wise": 3, "elimin": 3, "first": [3, 9, 10, 22], "shuffl": [3, 22], "resampl": 3, "behavior": 3, "would": 3, "differ": [3, 5, 6, 9, 10, 11, 12, 16, 20, 21], "last": 3, "run": 3, "mean": [3, 4, 5, 10, 11, 14, 16, 20], "occurr": [3, 17], "float": [3, 4, 5, 10, 11, 12, 16, 19, 20, 21], "add": [3, 5, 10, 11, 12, 13, 21], "normal": [3, 4, 5, 10, 11, 12, 21], "gaussian": [3, 5, 10, 11, 12, 21], "distribut": [3, 5, 10, 11, 12, 21], "nois": [3, 5, 10, 11, 12, 21], "decreas": [3, 5, 10, 11, 12, 21, 22], "overfit": [3, 5, 10, 11, 12, 16, 20, 21, 22], "test": [3, 5, 10, 11, 12, 13, 16, 20, 21, 22], "untouch": [3, 5, 10, 11, 12, 21], "give": [3, 11], "standard": [3, 5, 10, 11, 12, 21], "deviat": [3, 5, 10, 11, 12, 21], "spread": [3, 5, 10, 11, 12, 21], "width": [3, 5, 10, 11, 12, 21], "smooth": [3, 12, 16, 19, 20], "m": [3, 6, 9, 16, 19, 20], "probabl": [3, 10, 12, 16, 19, 20], "By": [3, 7], "tech": 3, "yandex": 3, "com": [3, 7, 9, 10, 11, 12, 16, 19, 21, 22], "doc": [3, 5, 7, 22], "dg": 3, "concept": 3, "algorithm": 3, "main": 3, "stages_cat": 3, "docpag": 3, "unbias": [3, 22], "boost": 3, "arxiv": 3, "org": [3, 6, 7, 10, 12, 16, 19, 20, 22], "ab": [3, 10], "1706": 3, "09516": 3, "must": [3, 5, 10, 11, 12, 16, 19, 20, 21], "sure": [3, 5, 10, 11, 12, 16, 19, 20, 21], "behav": [3, 5, 10, 11, 12, 16, 20, 21], "mainli": [3, 5, 10, 11, 12, 16, 20, 21], "due": [3, 5, 10, 11, 12, 16, 20, 21, 22], "avoid": [3, 5, 10, 11, 12, 16, 20, 21], "On": [3, 5, 10, 11, 12, 16, 19, 20, 21], "call": [3, 5, 10, 11, 12, 16, 17, 20, 21, 22], "without": [3, 5, 10, 11, 12, 16, 20, 21, 22], "countencod": [4, 9], "min_group_s": 4, "combine_min_nan_group": 4, "min_group_nam": 4, "replac": [4, 10, 16, 20], "group": [4, 10, 22], "rang": [4, 7], "value_count": 4, "more": [4, 5, 7, 10], "detail": [4, 7, 9], "minim": 4, "threshold": 4, "need": 4, "ensur": [4, 9], "combin": 4, "leftov": 4, "01": 4, "calcul": [4, 11], "mai": [4, 5, 7, 21, 22], "type": [4, 5, 9], "becom": [4, 22], "minimum": 4, "too": [4, 10], "long": 4, "In": [4, 5, 9, 10, 12, 16], "join": 4, "alphabet": 4, "_": 4, "delimit": 4, "keep": 4, "cross": [4, 10, 22], "valid": [4, 10, 22], "also": [4, 7, 9, 17], "small": [4, 10], "Will": [4, 14], "creat": [4, 19, 22], "combine_min_categori": [4, 9], "singl": [4, 6, 9, 11, 14, 20], "glmm": 5, "glmmencod": [5, 9], "05": [5, 10, 11, 12, 21], "binomial_target": 5, "supervis": [5, 22], "targetencod": [5, 9, 20], "mestimateencod": [5, 9, 12, 16], "advantag": [5, 7], "solid": 5, "statist": [5, 10, 16, 19], "theori": [5, 10], "behind": 5, "techniqu": [5, 9], "matur": 5, "branch": 5, "No": [5, 22], "hyper": 5, "tune": 5, "amount": 5, "shrinkag": [5, 10], "automat": 5, "through": 5, "process": [5, 7], "short": [5, 11], "less": 5, "observ": [5, 7, 10], "outcom": 5, "vari": 5, "toward": 5, "prior": [5, 9, 10, 12, 20], "grand": 5, "applic": [5, 10], "both": [5, 13], "global": [5, 10, 20], "log": [5, 10], "odd": [5, 10], "comparison": [5, 12, 16], "jamessteinestim": 5, "statsmodel": 5, "alpha": 5, "futur": [5, 22], "heurist": 5, "analysi": 5, "regress": [5, 16, 19], "multilevel": 5, "hierarch": [5, 20], "page": [5, 9], "253": 5, "faculti": 5, "psau": 5, "sa": 5, "filedownload": 5, "12": 5, "a1997d0d31f84d13c1cdc44ac39a8f2c": 5, "grayencod": [6, 9], "consecut": 6, "bit": [6, 7], "henc": [6, 10], "sens": [6, 10], "benefit": [6, 22], "privaci": 6, "preserv": 6, "publish": 6, "en": [6, 12, 16, 19], "wikipedia": [6, 12, 16, 19], "wiki": [6, 12, 16, 19], "gray_cod": 6, "jun": 6, "zhang": [6, 11], "graham": 6, "cormod": 6, "cecilia": 6, "procopiuc": 6, "divesh": 6, "srivastava": 6, "xiaokui": 6, "xiao": 6, "2017": [6, 10], "privbay": 6, "privat": 6, "releas": 6, "via": 6, "bayesian": 6, "network": 6, "acm": [6, 12, 16, 19, 20], "tran": 6, "databas": 6, "syst": 6, "42": 6, "4": [6, 7, 10, 16, 19, 20, 22], "articl": 6, "25": [6, 7, 19], "octob": 6, "hashingencod": [7, 9], "max_process": 7, "max_sampl": 7, "n_compon": 7, "8": 7, "hash_method": 7, "md5": 7, "process_creation_method": 7, "fork": 7, "multivari": 7, "dimension": 7, "precis": 7, "maintain": 7, "dictionari": [7, 14, 20], "consequ": 7, "grow": 7, "accept": 7, "dure": [7, 14], "score": 7, "design": [7, 19], "import": [7, 9, 20], "read": 7, "about": 7, "befor": [7, 22], "them": 7, "manual": 7, "inappropri": 7, "slow": 7, "down": 7, "window": 7, "multiprocess": 7, "might": 7, "issu": [7, 10, 14, 22], "github": [7, 9, 16, 19], "scikit": [7, 9], "contrib": [7, 9], "215": 7, "python": 7, "html": [7, 21, 22], "highlight": 7, "hashlib": 7, "mani": 7, "limit": [7, 10], "64": 7, "half": 7, "logic": 7, "cpu": 7, "4c4t": 7, "4c8t": 7, "larger": 7, "strong": 7, "recommend": [7, 9, 22], "than": [7, 10, 20], "count": [7, 9, 10, 20, 22], "low": [7, 9, 22], "memori": [7, 20], "machin": [7, 10], "num": 7, "100": 7, "000": 7, "6c12t": 7, "16": 7, "666": 7, "repres": [7, 11, 13, 14, 17, 19], "high": [7, 10, 12, 16, 19, 20], "cardin": [7, 12, 16, 19, 20], "consid": [7, 17], "up": [7, 17], "32": 7, "either": 7, "spawn": 7, "forkserv": 7, "avail": 7, "platform": 7, "context": 7, "start": [7, 22], "tradeoff": 7, "linux": 7, "maco": 7, "fastest": 7, "larg": 7, "scale": 7, "multitask": 7, "alex": 7, "smola": 7, "paper": [7, 20], "2009": 7, "weinbergeretal09": 7, "r8dde675226a2": 7, "don": 7, "trick": 7, "book": 7, "ai": 7, "dont": 7, "192a6aae3087": 7, "hash_chunk": 7, "hashing_trick_with_np_no_parallel": 7, "hashing_trick_with_np_parallel": 7, "hashing_trick": [7, 9], "hashing_method": 7, "make_copi": 7, "basic": 7, "identifi": 7, "descript": 7, "text": 7, "out": [7, 9, 22], "cite": 7, "literatur": 7, "r6b702480991a": 7, "section": 7, "abov": 7, "kilian": 7, "weinberg": 7, "anirban": 7, "dasgupta": 7, "john": 7, "langford": 7, "josh": 7, "attenberg": 7, "proc": 7, "icml": 7, "helmertencod": [8, 9], "style": 9, "while": [9, 12], "hash": 9, "share": 9, "few": 9, "properti": 9, "explicitli": 9, "index": 9, "infer": [9, 10, 22], "non": [9, 12, 16, 19, 20], "regardless": [9, 10], "veri": [9, 11], "portabl": 9, "pickl": 9, "reus": 9, "later": 9, "thing": 9, "full": [9, 22], "compat": 9, "dataset": [9, 20], "columntransform": 9, "consist": 9, "upgrad": 9, "least": 9, "transform_output": 9, "instal": 9, "pip": 9, "conda": 9, "c": 9, "forg": 9, "To": [9, 22], "ce": 9, "jamessteinencod": [9, 10], "leaveoneoutencod": [9, 11, 22], "onehotencod": [9, 13], "ordinalencod": [9, 14], "polynomialencod": [9, 15], "quantileencod": [9, 16], "rankhotencod": 9, "sumencod": [9, 18], "woeencod": [9, 21], "x_clean": 9, "x_dirti": 9, "fulli": 9, "thei": 9, "script": 9, "isn": 9, "everi": [9, 13, 17], "below": 9, "document": 9, "categoryencod": 9, "intern": [9, 22], "appos": 9, "done": [9, 16, 19], "whole": 9, "project": 9, "preprocessor": 9, "somepreprocessor": 9, "someencod": 9, "experi": 9, "anoth": [9, 11], "bug": 9, "feel": 9, "free": 9, "report": 9, "backward": 9, "catboost": 9, "gener": [9, 10, 13, 17, 22], "linear": 9, "mix": 9, "grai": 9, "helmert": 9, "jame": 9, "stein": 9, "leav": [9, 22], "One": 9, "transform_leave_one_out": [9, 11], "get_dummi": [9, 13], "reverse_dummi": [9, 13], "ordinal_encod": [9, 14], "quantil": [9, 19], "sum": 9, "summari": 9, "summaryencod": [9, 19], "weight": [9, 10, 20], "evid": 9, "wrapper": 9, "nestedcvwrapp": [9, 22], "modul": 9, "search": 9, "james_stein": 10, "independ": 10, "averag": [10, 20], "written": 10, "js_i": 10, "b": [10, 14], "y_i": 10, "question": [10, 11], "what": [10, 11], "put": 10, "much": 10, "condit": 10, "underfit": 10, "canon": 10, "solut": 10, "howev": [10, 22], "charl": 10, "came": 10, "close": 10, "intuit": 10, "unreli": 10, "equat": [10, 12, 16, 19], "var": 10, "remain": [10, 22], "do": 10, "know": 10, "let": [10, 22], "alon": 10, "But": [10, 22], "reliabl": 10, "alreadi": 10, "struggl": 10, "There": 10, "multipl": [10, 20, 22], "pretend": 10, "ident": 10, "pool": 10, "equal": 10, "squar": 10, "penal": 10, "se": [10, 20], "practic": 10, "wa": 10, "defin": [10, 20], "want": 10, "classif": [10, 12, 16, 19, 20], "better": 10, "bound": 10, "interv": 10, "unbound": 10, "ratio": [10, 22], "odds_ratio_i": 10, "y_not_i": 10, "tricki": 10, "sometim": 10, "fail": 10, "fatal": 10, "situat": 10, "beta": 10, "deliv": 10, "slightli": 10, "wors": 10, "accuraci": 10, "suffer": 10, "failur": 10, "parametr": 10, "empir": [10, 22], "bay": 10, "19": 10, "20": [10, 20], "www": [10, 21, 22], "jstor": 10, "stabl": 10, "2287098": 10, "chri": 10, "said": 10, "io": [10, 16, 19], "03": [10, 21], "compar": 10, "mobil": 10, "tabl": 10, "journal": 10, "sagepub": 10, "doi": 10, "10": [10, 12, 16, 19, 20, 22], "1177": 10, "0081175015570097": 10, "paradox": 10, "ration": 10, "philo": 10, "rug": 10, "nl": 10, "romeyn": 10, "2017_romeijn_": 10, "_paris_stein": 10, "5": [10, 16, 19, 20, 22], "statweb": 10, "stanford": 10, "ckirbi": 10, "brad": 10, "article1977": 10, "leave_one_out": 11, "exclud": 11, "current": [11, 17, 22], "row": 11, "level": 11, "reduc": 11, "outlier": 11, "optim": 11, "commonli": 11, "between": [11, 20], "6": [11, 20], "lead": 11, "significantli": 11, "suboptim": 11, "result": [11, 12, 13, 16, 17, 19, 22], "owen": 11, "broken": 11, "explan": 11, "datasci": 11, "stackexchang": 11, "10839": 11, "fit_column_map": 11, "fit_leave_one_out": 11, "m_estim": 12, "likelihood": 12, "simplifi": 12, "goe": 12, "under": 12, "known": 12, "incid": 12, "rate": 12, "tunabl": [12, 16], "two": [12, 16], "min_samples_leaf": [12, 20], "stronger": [12, 16, 19, 20], "shrink": [12, 16, 19], "neg": [12, 16, 19], "preprocess": [12, 16, 19, 20], "scheme": [12, 16, 19, 20], "attribut": [12, 13, 14, 16, 19, 20], "predict": [12, 16, 19, 20, 22], "7": [12, 16, 19, 20], "dl": [12, 16, 19, 20], "citat": [12, 16, 19, 20], "cfm": [12, 16, 19, 20], "id": [12, 16, 19, 20], "507538": [12, 16, 19, 20], "prune": [12, 16, 19], "link": [12, 16, 19], "springer": [12, 16, 19], "chapter": [12, 16, 19], "1007": [12, 16, 19], "bfb0017010": [12, 16, 19], "additive_smooth": [12, 16, 19], "generalized_to_the_case_of_known_incidence_r": [12, 16, 19], "one_hot": 13, "use_cat_nam": [13, 17], "produc": 13, "sinc": [13, 17], "duplic": [13, 17], "suffix": [13, 17, 22], "symbol": [13, 17], "until": [13, 17], "uniqu": [13, 17], "valueerror": 13, "encount": [13, 21], "missing": 13, "its": 13, "own": 13, "NOT": 13, "category_map": [13, 14], "generate_map": [13, 17], "knowledg": 14, "themselv": 14, "select": [14, 16], "kei": [14, 20], "pd": [14, 20], "original_label": 14, "encoded_label": 14, "col1": 14, "col2": 14, "imput": 14, "attempt": 14, "best": 14, "reconstruct": 14, "break": 14, "biject": 14, "those": 14, "occur": 14, "static": 14, "quantile_encod": [16, 19], "modifi": 16, "mestim": 16, "median": 16, "particular": [16, 20], "tackl": [16, 19], "2f978": [16, 19], "030": [16, 19], "85529": [16, 19], "1_14": [16, 19], "right": [16, 19], "wai": [16, 19, 22], "maxhalford": [16, 19], "blog": [16, 19], "fit_quantile_encod": 16, "rankhot": 17, "rank": 17, "except": 17, "thermomet": 17, "messag": 17, "displai": 17, "final": 17, "create_datafram": 17, "sum_cod": 18, "75": 19, "richer": 19, "element": 19, "individu": 19, "target_encod": 20, "hierarchi": 20, "blend": 20, "posterior": 20, "over": 20, "expect": 20, "taken": 20, "curv": 20, "axi": 20, "reach": 20, "k": 20, "balanc": [20, 22], "v": [20, 22], "strictli": 20, "bigger": 20, "flatter": 20, "hier_cola_1": 20, "hier_cola_n": 20, "hier_colb_1": 20, "hier_colb_m": 20, "cola": 20, "colb": 20, "highest": 20, "top": 20, "fetch_openml": 20, "display_col": 20, "mssubclass": 20, "mszone": 20, "lotfrontag": 20, "yearbuilt": 20, "heat": 20, "centralair": 20, "bunch": 20, "house_pric": 20, "as_fram": 20, "200000": 20, "enc": 20, "numeric_dataset": 20, "print": 20, "info": 20, "core": 20, "rangeindex": 20, "1460": 20, "entri": 20, "1459": 20, "total": [20, 22], "null": 20, "dtype": 20, "float64": 20, "1201": 20, "usag": 20, "80": 20, "kb": 20, "load_compass": 20, "hierarchical_map": 20, "compass": 20, "ne": 20, "w": 20, "loc": 20, "hierarchy_dataset": 20, "62263617": 20, "90382995": 20, "17660024": 20, "46051953": 20, "40332791": 20, "load_postcod": 20, "postcod": 20, "hier_col": 20, "hier_postcode_1": 20, "hier_postcode_2": 20, "hier_postcode_3": 20, "hier_postcode_4": 20, "75063473": 20, "90208756": 20, "88328833": 20, "77041254": 20, "68891504": 20, "85012847": 20, "76772574": 20, "88742357": 20, "7933824": 20, "63776756": 20, "9019973": 20, "fit_target_encod": 20, "woe": 21, "purpos": 21, "mostli": 21, "prevent": [21, 22], "divis": 21, "zero": [21, 22], "explain": 21, "listendata": 21, "2015": 21, "feature_encod": 22, "baseencod": 22, "extend": 22, "subsequ": 22, "inner": 22, "execut": 22, "binar": 22, "underscor": 22, "correspond": 22, "edg": 22, "scenario": 22, "dog": 22, "cat_frog": 22, "dog_cat": 22, "frog": 22, "experiment": 22, "cv": 22, "minimis": 22, "follow": 22, "x_train_encod": 22, "x_train": 22, "y_train": 22, "x_valid_encod": 22, "x_valid": 22, "fold": 22, "trn": 22, "val": 22, "kfold": 22, "split": 22, "place": 22, "discuss": 22, "here": 22, "sebastianraschka": 22, "faq": 22, "evalu": 22, "readm": 22, "md": 22, "although": 22, "most": 22, "our": 22, "illustr": 22, "imagin": 22, "unpredict": 22, "nomin": 22, "perfectli": 22, "ceas": 22, "wrong": 22, "alwai": 22, "major": 22, "seemingli": 22, "And": 22, "unfortun": 22, "even": 22, "immun": 22, "kdd": 22, "exploration_fil": 22, "v12": 22, "02": 22, "ur": 22, "perlich": 22, "reason": 22, "why": 22, "greatli": 22, "stratifiedkfold": 22, "batch": 22, "randomst": 22, "seed": 22, "x_test": 22, "m_sampl": 22, "tupl": 22, "groupkfold": 22, "n_numer": 22}, "objects": {"category_encoders.backward_difference": [[0, 0, 1, "", "BackwardDifferenceEncoder"]], "category_encoders.backward_difference.BackwardDifferenceEncoder": [[0, 1, 1, "", "fit"], [0, 1, 1, "", "fit_transform"], [0, 1, 1, "", "get_feature_names_in"], [0, 1, 1, "", "get_feature_names_out"], [0, 1, 1, "", "get_metadata_routing"], [0, 1, 1, "", "get_params"], [0, 1, 1, "", "set_output"], [0, 1, 1, "", "set_params"], [0, 1, 1, "", "set_transform_request"], [0, 1, 1, "", "transform"]], "category_encoders.basen": [[1, 0, 1, "", "BaseNEncoder"]], "category_encoders.basen.BaseNEncoder": [[1, 1, 1, "", "basen_encode"], [1, 1, 1, "", "basen_to_integer"], [1, 1, 1, "", "col_transform"], [1, 1, 1, "", "fit"], [1, 1, 1, "", "fit_transform"], [1, 1, 1, "", "get_feature_names_in"], [1, 1, 1, "", "get_feature_names_out"], [1, 1, 1, "", "get_metadata_routing"], [1, 1, 1, "", "get_params"], [1, 1, 1, "", "inverse_transform"], [1, 1, 1, "", "set_inverse_transform_request"], [1, 1, 1, "", "set_output"], [1, 1, 1, "", "set_params"], [1, 1, 1, "", "set_transform_request"], [1, 1, 1, "", "transform"]], "category_encoders.binary": [[2, 0, 1, "", "BinaryEncoder"]], "category_encoders.binary.BinaryEncoder": [[2, 1, 1, "", "basen_encode"], [2, 1, 1, "", "basen_to_integer"], [2, 1, 1, "", "col_transform"], [2, 1, 1, "", "fit"], [2, 1, 1, "", "fit_transform"], [2, 1, 1, "", "get_feature_names_in"], [2, 1, 1, "", "get_feature_names_out"], [2, 1, 1, "", "get_metadata_routing"], [2, 1, 1, "", "get_params"], [2, 1, 1, "", "inverse_transform"], [2, 1, 1, "", "set_inverse_transform_request"], [2, 1, 1, "", "set_output"], [2, 1, 1, "", "set_params"], [2, 1, 1, "", "set_transform_request"], [2, 1, 1, "", "transform"]], "category_encoders.cat_boost": [[3, 0, 1, "", "CatBoostEncoder"]], "category_encoders.cat_boost.CatBoostEncoder": [[3, 1, 1, "", "fit"], [3, 1, 1, "", "fit_transform"], [3, 1, 1, "", "get_feature_names_in"], [3, 1, 1, "", "get_feature_names_out"], [3, 1, 1, "", "get_metadata_routing"], [3, 1, 1, "", "get_params"], [3, 1, 1, "", "set_output"], [3, 1, 1, "", "set_params"], [3, 1, 1, "", "set_transform_request"], [3, 1, 1, "", "transform"]], "category_encoders.count": [[4, 0, 1, "", "CountEncoder"]], "category_encoders.count.CountEncoder": [[4, 1, 1, "", "combine_min_categories"], [4, 1, 1, "", "fit"], [4, 1, 1, "", "fit_transform"], [4, 1, 1, "", "get_feature_names_in"], [4, 1, 1, "", "get_feature_names_out"], [4, 1, 1, "", "get_metadata_routing"], [4, 1, 1, "", "get_params"], [4, 1, 1, "", "set_output"], [4, 1, 1, "", "set_params"], [4, 1, 1, "", "set_transform_request"], [4, 1, 1, "", "transform"]], "category_encoders.glmm": [[5, 0, 1, "", "GLMMEncoder"]], "category_encoders.glmm.GLMMEncoder": [[5, 1, 1, "", "fit"], [5, 1, 1, "", "fit_transform"], [5, 1, 1, "", "get_feature_names_in"], [5, 1, 1, "", "get_feature_names_out"], [5, 1, 1, "", "get_metadata_routing"], [5, 1, 1, "", "get_params"], [5, 1, 1, "", "set_output"], [5, 1, 1, "", "set_params"], [5, 1, 1, "", "set_transform_request"], [5, 1, 1, "", "transform"]], "category_encoders.gray": [[6, 0, 1, "", "GrayEncoder"]], "category_encoders.gray.GrayEncoder": [[6, 1, 1, "", "basen_encode"], [6, 1, 1, "", "basen_to_integer"], [6, 1, 1, "", "col_transform"], [6, 1, 1, "", "fit"], [6, 1, 1, "", "fit_transform"], [6, 1, 1, "", "get_feature_names_in"], [6, 1, 1, "", "get_feature_names_out"], [6, 1, 1, "", "get_metadata_routing"], [6, 1, 1, "", "get_params"], [6, 1, 1, "", "inverse_transform"], [6, 1, 1, "", "set_inverse_transform_request"], [6, 1, 1, "", "set_output"], [6, 1, 1, "", "set_params"], [6, 1, 1, "", "set_transform_request"], [6, 1, 1, "", "transform"]], "category_encoders.hashing": [[7, 0, 1, "", "HashingEncoder"]], "category_encoders.hashing.HashingEncoder": [[7, 1, 1, "", "fit"], [7, 1, 1, "", "fit_transform"], [7, 1, 1, "", "get_feature_names_in"], [7, 1, 1, "", "get_feature_names_out"], [7, 1, 1, "", "get_metadata_routing"], [7, 1, 1, "", "get_params"], [7, 1, 1, "", "hashing_trick"], [7, 1, 1, "", "set_output"], [7, 1, 1, "", "set_params"], [7, 1, 1, "", "set_transform_request"], [7, 1, 1, "", "transform"]], "category_encoders.helmert": [[8, 0, 1, "", "HelmertEncoder"]], "category_encoders.helmert.HelmertEncoder": [[8, 1, 1, "", "fit"], [8, 1, 1, "", "fit_transform"], [8, 1, 1, "", "get_feature_names_in"], [8, 1, 1, "", "get_feature_names_out"], [8, 1, 1, "", "get_metadata_routing"], [8, 1, 1, "", "get_params"], [8, 1, 1, "", "set_output"], [8, 1, 1, "", "set_params"], [8, 1, 1, "", "set_transform_request"], [8, 1, 1, "", "transform"]], "category_encoders.james_stein": [[10, 0, 1, "", "JamesSteinEncoder"]], "category_encoders.james_stein.JamesSteinEncoder": [[10, 1, 1, "", "fit"], [10, 1, 1, "", "fit_transform"], [10, 1, 1, "", "get_feature_names_in"], [10, 1, 1, "", "get_feature_names_out"], [10, 1, 1, "", "get_metadata_routing"], [10, 1, 1, "", "get_params"], [10, 1, 1, "", "set_output"], [10, 1, 1, "", "set_params"], [10, 1, 1, "", "set_transform_request"], [10, 1, 1, "", "transform"]], "category_encoders.leave_one_out": [[11, 0, 1, "", "LeaveOneOutEncoder"]], "category_encoders.leave_one_out.LeaveOneOutEncoder": [[11, 1, 1, "", "fit"], [11, 1, 1, "", "fit_transform"], [11, 1, 1, "", "get_feature_names_in"], [11, 1, 1, "", "get_feature_names_out"], [11, 1, 1, "", "get_metadata_routing"], [11, 1, 1, "", "get_params"], [11, 1, 1, "", "set_output"], [11, 1, 1, "", "set_params"], [11, 1, 1, "", "set_transform_request"], [11, 1, 1, "", "transform"], [11, 1, 1, "", "transform_leave_one_out"]], "category_encoders.m_estimate": [[12, 0, 1, "", "MEstimateEncoder"]], "category_encoders.m_estimate.MEstimateEncoder": [[12, 1, 1, "", "fit"], [12, 1, 1, "", "fit_transform"], [12, 1, 1, "", "get_feature_names_in"], [12, 1, 1, "", "get_feature_names_out"], [12, 1, 1, "", "get_metadata_routing"], [12, 1, 1, "", "get_params"], [12, 1, 1, "", "set_output"], [12, 1, 1, "", "set_params"], [12, 1, 1, "", "set_transform_request"], [12, 1, 1, "", "transform"]], "category_encoders.one_hot": [[13, 0, 1, "", "OneHotEncoder"]], "category_encoders.one_hot.OneHotEncoder": [[13, 1, 1, "", "fit"], [13, 1, 1, "", "fit_transform"], [13, 1, 1, "", "get_dummies"], [13, 1, 1, "", "get_feature_names_in"], [13, 1, 1, "", "get_feature_names_out"], [13, 1, 1, "", "get_metadata_routing"], [13, 1, 1, "", "get_params"], [13, 1, 1, "", "inverse_transform"], [13, 1, 1, "", "reverse_dummies"], [13, 1, 1, "", "set_inverse_transform_request"], [13, 1, 1, "", "set_output"], [13, 1, 1, "", "set_params"], [13, 1, 1, "", "set_transform_request"], [13, 1, 1, "", "transform"]], "category_encoders.ordinal": [[14, 0, 1, "", "OrdinalEncoder"]], "category_encoders.ordinal.OrdinalEncoder": [[14, 1, 1, "", "fit"], [14, 1, 1, "", "fit_transform"], [14, 1, 1, "", "get_feature_names_in"], [14, 1, 1, "", "get_feature_names_out"], [14, 1, 1, "", "get_metadata_routing"], [14, 1, 1, "", "get_params"], [14, 1, 1, "", "inverse_transform"], [14, 1, 1, "", "ordinal_encoding"], [14, 1, 1, "", "set_inverse_transform_request"], [14, 1, 1, "", "set_output"], [14, 1, 1, "", "set_params"], [14, 1, 1, "", "set_transform_request"], [14, 1, 1, "", "transform"]], "category_encoders.polynomial": [[15, 0, 1, "", "PolynomialEncoder"]], "category_encoders.polynomial.PolynomialEncoder": [[15, 1, 1, "", "fit"], [15, 1, 1, "", "fit_transform"], [15, 1, 1, "", "get_feature_names_in"], [15, 1, 1, "", "get_feature_names_out"], [15, 1, 1, "", "get_metadata_routing"], [15, 1, 1, "", "get_params"], [15, 1, 1, "", "set_output"], [15, 1, 1, "", "set_params"], [15, 1, 1, "", "set_transform_request"], [15, 1, 1, "", "transform"]], "category_encoders.quantile_encoder": [[16, 0, 1, "", "QuantileEncoder"], [19, 0, 1, "", "SummaryEncoder"]], "category_encoders.quantile_encoder.QuantileEncoder": [[16, 1, 1, "", "fit"], [16, 1, 1, "", "fit_transform"], [16, 1, 1, "", "get_feature_names_in"], [16, 1, 1, "", "get_feature_names_out"], [16, 1, 1, "", "get_metadata_routing"], [16, 1, 1, "", "get_params"], [16, 1, 1, "", "set_output"], [16, 1, 1, "", "set_params"], [16, 1, 1, "", "set_transform_request"], [16, 1, 1, "", "transform"]], "category_encoders.quantile_encoder.SummaryEncoder": [[19, 1, 1, "", "fit"], [19, 1, 1, "", "fit_transform"], [19, 1, 1, "", "get_feature_names_in"], [19, 1, 1, "", "get_feature_names_out"], [19, 1, 1, "", "get_metadata_routing"], [19, 1, 1, "", "get_params"], [19, 1, 1, "", "set_params"], [19, 1, 1, "", "set_transform_request"]], "category_encoders.rankhot": [[17, 0, 1, "", "RankHotEncoder"]], "category_encoders.rankhot.RankHotEncoder": [[17, 1, 1, "", "fit"], [17, 1, 1, "", "fit_transform"], [17, 1, 1, "", "get_feature_names_in"], [17, 1, 1, "", "get_feature_names_out"], [17, 1, 1, "", "get_metadata_routing"], [17, 1, 1, "", "get_params"], [17, 1, 1, "", "set_inverse_transform_request"], [17, 1, 1, "", "set_output"], [17, 1, 1, "", "set_params"], [17, 1, 1, "", "set_transform_request"], [17, 1, 1, "", "transform"]], "category_encoders.sum_coding": [[18, 0, 1, "", "SumEncoder"]], "category_encoders.sum_coding.SumEncoder": [[18, 1, 1, "", "fit"], [18, 1, 1, "", "fit_transform"], [18, 1, 1, "", "get_feature_names_in"], [18, 1, 1, "", "get_feature_names_out"], [18, 1, 1, "", "get_metadata_routing"], [18, 1, 1, "", "get_params"], [18, 1, 1, "", "set_output"], [18, 1, 1, "", "set_params"], [18, 1, 1, "", "set_transform_request"], [18, 1, 1, "", "transform"]], "category_encoders.target_encoder": [[20, 0, 1, "", "TargetEncoder"]], "category_encoders.target_encoder.TargetEncoder": [[20, 1, 1, "", "fit"], [20, 1, 1, "", "fit_transform"], [20, 1, 1, "", "get_feature_names_in"], [20, 1, 1, "", "get_feature_names_out"], [20, 1, 1, "", "get_metadata_routing"], [20, 1, 1, "", "get_params"], [20, 1, 1, "", "set_output"], [20, 1, 1, "", "set_params"], [20, 1, 1, "", "set_transform_request"], [20, 1, 1, "", "transform"]], "category_encoders.woe": [[21, 0, 1, "", "WOEEncoder"]], "category_encoders.woe.WOEEncoder": [[21, 1, 1, "", "fit"], [21, 1, 1, "", "fit_transform"], [21, 1, 1, "", "get_feature_names_in"], [21, 1, 1, "", "get_feature_names_out"], [21, 1, 1, "", "get_metadata_routing"], [21, 1, 1, "", "get_params"], [21, 1, 1, "", "set_output"], [21, 1, 1, "", "set_params"], [21, 1, 1, "", "set_transform_request"], [21, 1, 1, "", "transform"]], "category_encoders.wrapper": [[22, 0, 1, "", "NestedCVWrapper"], [22, 0, 1, "", "PolynomialWrapper"]], "category_encoders.wrapper.NestedCVWrapper": [[22, 1, 1, "", "fit"], [22, 1, 1, "", "fit_transform"], [22, 1, 1, "", "transform"]], "category_encoders.wrapper.PolynomialWrapper": [[22, 1, 1, "", "fit_transform"]]}, "objtypes": {"0": "py:class", "1": "py:method"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"]}, "titleterms": {"backward": 0, "differ": 0, "code": [0, 8, 15, 18], "basen": 1, "binari": 2, "catboost": 3, "encod": [3, 4, 5, 9, 10, 16, 19, 20], "count": 4, "gener": 5, "linear": 5, "mix": 5, "model": 5, "grai": 6, "hash": 7, "helmert": 8, "categori": 9, "usag": 9, "known": 9, "issu": 9, "content": 9, "indic": 9, "tabl": 9, "jame": 10, "stein": 10, "leav": 11, "One": [11, 13], "out": 11, "m": 12, "estim": 12, "hot": 13, "ordin": 14, "polynomi": 15, "quantil": 16, "rankhotencod": 17, "sum": 18, "summari": 19, "target": 20, "weight": 21, "evid": 21, "wrapper": 22}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 58}, "alltitles": {"Backward Difference Coding": [[0, "backward-difference-coding"]], "BaseN": [[1, "basen"]], "Binary": [[2, "binary"]], "CatBoost Encoder": [[3, "catboost-encoder"]], "Count Encoder": [[4, "count-encoder"]], "Generalized Linear Mixed Model Encoder": [[5, "generalized-linear-mixed-model-encoder"]], "Gray": [[6, "gray"]], "Hashing": [[7, "hashing"]], "Helmert Coding": [[8, "helmert-coding"]], "Category Encoders": [[9, "category-encoders"]], "Usage": [[9, "usage"]], "Known issues:": [[9, "known-issues"]], "Contents:": [[9, "contents"]], "Indices and tables": [[9, "indices-and-tables"]], "James-Stein Encoder": [[10, "james-stein-encoder"]], "Leave One Out": [[11, "leave-one-out"]], "M-estimate": [[12, "m-estimate"]], "One Hot": [[13, "one-hot"]], "Ordinal": [[14, "ordinal"]], "Polynomial Coding": [[15, "polynomial-coding"]], "Quantile Encoder": [[16, "quantile-encoder"]], "RankHotEncoder": [[17, "rankhotencoder"]], "Sum Coding": [[18, "sum-coding"]], "Summary Encoder": [[19, "summary-encoder"]], "Target Encoder": [[20, "target-encoder"]], "Weight of Evidence": [[21, "weight-of-evidence"]], "Wrappers": [[22, "wrappers"]]}, "indexentries": {"backwarddifferenceencoder (class in category_encoders.backward_difference)": [[0, "category_encoders.backward_difference.BackwardDifferenceEncoder"]], "fit() (category_encoders.backward_difference.backwarddifferenceencoder method)": [[0, "category_encoders.backward_difference.BackwardDifferenceEncoder.fit"]], "fit_transform() (category_encoders.backward_difference.backwarddifferenceencoder method)": [[0, "category_encoders.backward_difference.BackwardDifferenceEncoder.fit_transform"]], "get_feature_names_in() (category_encoders.backward_difference.backwarddifferenceencoder method)": [[0, "category_encoders.backward_difference.BackwardDifferenceEncoder.get_feature_names_in"]], "get_feature_names_out() (category_encoders.backward_difference.backwarddifferenceencoder method)": [[0, "category_encoders.backward_difference.BackwardDifferenceEncoder.get_feature_names_out"]], "get_metadata_routing() (category_encoders.backward_difference.backwarddifferenceencoder method)": [[0, "category_encoders.backward_difference.BackwardDifferenceEncoder.get_metadata_routing"]], "get_params() (category_encoders.backward_difference.backwarddifferenceencoder method)": [[0, "category_encoders.backward_difference.BackwardDifferenceEncoder.get_params"]], "set_output() (category_encoders.backward_difference.backwarddifferenceencoder method)": [[0, "category_encoders.backward_difference.BackwardDifferenceEncoder.set_output"]], "set_params() (category_encoders.backward_difference.backwarddifferenceencoder method)": [[0, "category_encoders.backward_difference.BackwardDifferenceEncoder.set_params"]], "set_transform_request() (category_encoders.backward_difference.backwarddifferenceencoder method)": [[0, "category_encoders.backward_difference.BackwardDifferenceEncoder.set_transform_request"]], "transform() (category_encoders.backward_difference.backwarddifferenceencoder method)": [[0, "category_encoders.backward_difference.BackwardDifferenceEncoder.transform"]], "basenencoder (class in category_encoders.basen)": [[1, "category_encoders.basen.BaseNEncoder"]], "basen_encode() (category_encoders.basen.basenencoder method)": [[1, "category_encoders.basen.BaseNEncoder.basen_encode"]], "basen_to_integer() (category_encoders.basen.basenencoder method)": [[1, "category_encoders.basen.BaseNEncoder.basen_to_integer"]], "col_transform() (category_encoders.basen.basenencoder method)": [[1, "category_encoders.basen.BaseNEncoder.col_transform"]], "fit() (category_encoders.basen.basenencoder method)": [[1, "category_encoders.basen.BaseNEncoder.fit"]], "fit_transform() (category_encoders.basen.basenencoder method)": [[1, "category_encoders.basen.BaseNEncoder.fit_transform"]], "get_feature_names_in() (category_encoders.basen.basenencoder method)": [[1, "category_encoders.basen.BaseNEncoder.get_feature_names_in"]], "get_feature_names_out() (category_encoders.basen.basenencoder method)": [[1, "category_encoders.basen.BaseNEncoder.get_feature_names_out"]], "get_metadata_routing() (category_encoders.basen.basenencoder method)": [[1, "category_encoders.basen.BaseNEncoder.get_metadata_routing"]], "get_params() (category_encoders.basen.basenencoder method)": [[1, "category_encoders.basen.BaseNEncoder.get_params"]], "inverse_transform() (category_encoders.basen.basenencoder method)": [[1, "category_encoders.basen.BaseNEncoder.inverse_transform"]], "set_inverse_transform_request() (category_encoders.basen.basenencoder method)": [[1, "category_encoders.basen.BaseNEncoder.set_inverse_transform_request"]], "set_output() (category_encoders.basen.basenencoder method)": [[1, "category_encoders.basen.BaseNEncoder.set_output"]], "set_params() (category_encoders.basen.basenencoder method)": [[1, "category_encoders.basen.BaseNEncoder.set_params"]], "set_transform_request() (category_encoders.basen.basenencoder method)": [[1, "category_encoders.basen.BaseNEncoder.set_transform_request"]], "transform() (category_encoders.basen.basenencoder method)": [[1, "category_encoders.basen.BaseNEncoder.transform"]], "binaryencoder (class in category_encoders.binary)": [[2, "category_encoders.binary.BinaryEncoder"]], "basen_encode() (category_encoders.binary.binaryencoder method)": [[2, "category_encoders.binary.BinaryEncoder.basen_encode"]], "basen_to_integer() (category_encoders.binary.binaryencoder method)": [[2, "category_encoders.binary.BinaryEncoder.basen_to_integer"]], "col_transform() (category_encoders.binary.binaryencoder method)": [[2, "category_encoders.binary.BinaryEncoder.col_transform"]], "fit() (category_encoders.binary.binaryencoder method)": [[2, "category_encoders.binary.BinaryEncoder.fit"]], "fit_transform() (category_encoders.binary.binaryencoder method)": [[2, "category_encoders.binary.BinaryEncoder.fit_transform"]], "get_feature_names_in() (category_encoders.binary.binaryencoder method)": [[2, "category_encoders.binary.BinaryEncoder.get_feature_names_in"]], "get_feature_names_out() (category_encoders.binary.binaryencoder method)": [[2, "category_encoders.binary.BinaryEncoder.get_feature_names_out"]], "get_metadata_routing() (category_encoders.binary.binaryencoder method)": [[2, "category_encoders.binary.BinaryEncoder.get_metadata_routing"]], "get_params() (category_encoders.binary.binaryencoder method)": [[2, "category_encoders.binary.BinaryEncoder.get_params"]], "inverse_transform() (category_encoders.binary.binaryencoder method)": [[2, "category_encoders.binary.BinaryEncoder.inverse_transform"]], "set_inverse_transform_request() (category_encoders.binary.binaryencoder method)": [[2, "category_encoders.binary.BinaryEncoder.set_inverse_transform_request"]], "set_output() (category_encoders.binary.binaryencoder method)": [[2, "category_encoders.binary.BinaryEncoder.set_output"]], "set_params() (category_encoders.binary.binaryencoder method)": [[2, "category_encoders.binary.BinaryEncoder.set_params"]], "set_transform_request() (category_encoders.binary.binaryencoder method)": [[2, "category_encoders.binary.BinaryEncoder.set_transform_request"]], "transform() (category_encoders.binary.binaryencoder method)": [[2, "category_encoders.binary.BinaryEncoder.transform"]], "catboostencoder (class in category_encoders.cat_boost)": [[3, "category_encoders.cat_boost.CatBoostEncoder"]], "fit() (category_encoders.cat_boost.catboostencoder method)": [[3, "category_encoders.cat_boost.CatBoostEncoder.fit"]], "fit_transform() (category_encoders.cat_boost.catboostencoder method)": [[3, "category_encoders.cat_boost.CatBoostEncoder.fit_transform"]], "get_feature_names_in() (category_encoders.cat_boost.catboostencoder method)": [[3, "category_encoders.cat_boost.CatBoostEncoder.get_feature_names_in"]], "get_feature_names_out() (category_encoders.cat_boost.catboostencoder method)": [[3, "category_encoders.cat_boost.CatBoostEncoder.get_feature_names_out"]], "get_metadata_routing() (category_encoders.cat_boost.catboostencoder method)": [[3, "category_encoders.cat_boost.CatBoostEncoder.get_metadata_routing"]], "get_params() (category_encoders.cat_boost.catboostencoder method)": [[3, "category_encoders.cat_boost.CatBoostEncoder.get_params"]], "set_output() (category_encoders.cat_boost.catboostencoder method)": [[3, "category_encoders.cat_boost.CatBoostEncoder.set_output"]], "set_params() (category_encoders.cat_boost.catboostencoder method)": [[3, "category_encoders.cat_boost.CatBoostEncoder.set_params"]], "set_transform_request() (category_encoders.cat_boost.catboostencoder method)": [[3, "category_encoders.cat_boost.CatBoostEncoder.set_transform_request"]], "transform() (category_encoders.cat_boost.catboostencoder method)": [[3, "category_encoders.cat_boost.CatBoostEncoder.transform"]], "countencoder (class in category_encoders.count)": [[4, "category_encoders.count.CountEncoder"]], "combine_min_categories() (category_encoders.count.countencoder method)": [[4, "category_encoders.count.CountEncoder.combine_min_categories"]], "fit() (category_encoders.count.countencoder method)": [[4, "category_encoders.count.CountEncoder.fit"]], "fit_transform() (category_encoders.count.countencoder method)": [[4, "category_encoders.count.CountEncoder.fit_transform"]], "get_feature_names_in() (category_encoders.count.countencoder method)": [[4, "category_encoders.count.CountEncoder.get_feature_names_in"]], "get_feature_names_out() (category_encoders.count.countencoder method)": [[4, "category_encoders.count.CountEncoder.get_feature_names_out"]], "get_metadata_routing() (category_encoders.count.countencoder method)": [[4, "category_encoders.count.CountEncoder.get_metadata_routing"]], "get_params() (category_encoders.count.countencoder method)": [[4, "category_encoders.count.CountEncoder.get_params"]], "set_output() (category_encoders.count.countencoder method)": [[4, "category_encoders.count.CountEncoder.set_output"]], "set_params() (category_encoders.count.countencoder method)": [[4, "category_encoders.count.CountEncoder.set_params"]], "set_transform_request() (category_encoders.count.countencoder method)": [[4, "category_encoders.count.CountEncoder.set_transform_request"]], "transform() (category_encoders.count.countencoder method)": [[4, "category_encoders.count.CountEncoder.transform"]], "glmmencoder (class in category_encoders.glmm)": [[5, "category_encoders.glmm.GLMMEncoder"]], "fit() (category_encoders.glmm.glmmencoder method)": [[5, "category_encoders.glmm.GLMMEncoder.fit"]], "fit_transform() (category_encoders.glmm.glmmencoder method)": [[5, "category_encoders.glmm.GLMMEncoder.fit_transform"]], "get_feature_names_in() (category_encoders.glmm.glmmencoder method)": [[5, "category_encoders.glmm.GLMMEncoder.get_feature_names_in"]], "get_feature_names_out() (category_encoders.glmm.glmmencoder method)": [[5, "category_encoders.glmm.GLMMEncoder.get_feature_names_out"]], "get_metadata_routing() (category_encoders.glmm.glmmencoder method)": [[5, "category_encoders.glmm.GLMMEncoder.get_metadata_routing"]], "get_params() (category_encoders.glmm.glmmencoder method)": [[5, "category_encoders.glmm.GLMMEncoder.get_params"]], "set_output() (category_encoders.glmm.glmmencoder method)": [[5, "category_encoders.glmm.GLMMEncoder.set_output"]], "set_params() (category_encoders.glmm.glmmencoder method)": [[5, "category_encoders.glmm.GLMMEncoder.set_params"]], "set_transform_request() (category_encoders.glmm.glmmencoder method)": [[5, "category_encoders.glmm.GLMMEncoder.set_transform_request"]], "transform() (category_encoders.glmm.glmmencoder method)": [[5, "category_encoders.glmm.GLMMEncoder.transform"]], "grayencoder (class in category_encoders.gray)": [[6, "category_encoders.gray.GrayEncoder"]], "basen_encode() (category_encoders.gray.grayencoder method)": [[6, "category_encoders.gray.GrayEncoder.basen_encode"]], "basen_to_integer() (category_encoders.gray.grayencoder method)": [[6, "category_encoders.gray.GrayEncoder.basen_to_integer"]], "col_transform() (category_encoders.gray.grayencoder method)": [[6, "category_encoders.gray.GrayEncoder.col_transform"]], "fit() (category_encoders.gray.grayencoder method)": [[6, "category_encoders.gray.GrayEncoder.fit"]], "fit_transform() (category_encoders.gray.grayencoder method)": [[6, "category_encoders.gray.GrayEncoder.fit_transform"]], "get_feature_names_in() (category_encoders.gray.grayencoder method)": [[6, "category_encoders.gray.GrayEncoder.get_feature_names_in"]], "get_feature_names_out() (category_encoders.gray.grayencoder method)": [[6, "category_encoders.gray.GrayEncoder.get_feature_names_out"]], "get_metadata_routing() (category_encoders.gray.grayencoder method)": [[6, "category_encoders.gray.GrayEncoder.get_metadata_routing"]], "get_params() (category_encoders.gray.grayencoder method)": [[6, "category_encoders.gray.GrayEncoder.get_params"]], "inverse_transform() (category_encoders.gray.grayencoder method)": [[6, "category_encoders.gray.GrayEncoder.inverse_transform"]], "set_inverse_transform_request() (category_encoders.gray.grayencoder method)": [[6, "category_encoders.gray.GrayEncoder.set_inverse_transform_request"]], "set_output() (category_encoders.gray.grayencoder method)": [[6, "category_encoders.gray.GrayEncoder.set_output"]], "set_params() (category_encoders.gray.grayencoder method)": [[6, "category_encoders.gray.GrayEncoder.set_params"]], "set_transform_request() (category_encoders.gray.grayencoder method)": [[6, "category_encoders.gray.GrayEncoder.set_transform_request"]], "transform() (category_encoders.gray.grayencoder method)": [[6, "category_encoders.gray.GrayEncoder.transform"]], "hashingencoder (class in category_encoders.hashing)": [[7, "category_encoders.hashing.HashingEncoder"]], "fit() (category_encoders.hashing.hashingencoder method)": [[7, "category_encoders.hashing.HashingEncoder.fit"]], "fit_transform() (category_encoders.hashing.hashingencoder method)": [[7, "category_encoders.hashing.HashingEncoder.fit_transform"]], "get_feature_names_in() (category_encoders.hashing.hashingencoder method)": [[7, "category_encoders.hashing.HashingEncoder.get_feature_names_in"]], "get_feature_names_out() (category_encoders.hashing.hashingencoder method)": [[7, "category_encoders.hashing.HashingEncoder.get_feature_names_out"]], "get_metadata_routing() (category_encoders.hashing.hashingencoder method)": [[7, "category_encoders.hashing.HashingEncoder.get_metadata_routing"]], "get_params() (category_encoders.hashing.hashingencoder method)": [[7, "category_encoders.hashing.HashingEncoder.get_params"]], "hashing_trick() (category_encoders.hashing.hashingencoder method)": [[7, "category_encoders.hashing.HashingEncoder.hashing_trick"]], "set_output() (category_encoders.hashing.hashingencoder method)": [[7, "category_encoders.hashing.HashingEncoder.set_output"]], "set_params() (category_encoders.hashing.hashingencoder method)": [[7, "category_encoders.hashing.HashingEncoder.set_params"]], "set_transform_request() (category_encoders.hashing.hashingencoder method)": [[7, "category_encoders.hashing.HashingEncoder.set_transform_request"]], "transform() (category_encoders.hashing.hashingencoder method)": [[7, "category_encoders.hashing.HashingEncoder.transform"]], "helmertencoder (class in category_encoders.helmert)": [[8, "category_encoders.helmert.HelmertEncoder"]], "fit() (category_encoders.helmert.helmertencoder method)": [[8, "category_encoders.helmert.HelmertEncoder.fit"]], "fit_transform() (category_encoders.helmert.helmertencoder method)": [[8, "category_encoders.helmert.HelmertEncoder.fit_transform"]], "get_feature_names_in() (category_encoders.helmert.helmertencoder method)": [[8, "category_encoders.helmert.HelmertEncoder.get_feature_names_in"]], "get_feature_names_out() (category_encoders.helmert.helmertencoder method)": [[8, "category_encoders.helmert.HelmertEncoder.get_feature_names_out"]], "get_metadata_routing() (category_encoders.helmert.helmertencoder method)": [[8, "category_encoders.helmert.HelmertEncoder.get_metadata_routing"]], "get_params() (category_encoders.helmert.helmertencoder method)": [[8, "category_encoders.helmert.HelmertEncoder.get_params"]], "set_output() (category_encoders.helmert.helmertencoder method)": [[8, "category_encoders.helmert.HelmertEncoder.set_output"]], "set_params() (category_encoders.helmert.helmertencoder method)": [[8, "category_encoders.helmert.HelmertEncoder.set_params"]], "set_transform_request() (category_encoders.helmert.helmertencoder method)": [[8, "category_encoders.helmert.HelmertEncoder.set_transform_request"]], "transform() (category_encoders.helmert.helmertencoder method)": [[8, "category_encoders.helmert.HelmertEncoder.transform"]], "jamessteinencoder (class in category_encoders.james_stein)": [[10, "category_encoders.james_stein.JamesSteinEncoder"]], "fit() (category_encoders.james_stein.jamessteinencoder method)": [[10, "category_encoders.james_stein.JamesSteinEncoder.fit"]], "fit_transform() (category_encoders.james_stein.jamessteinencoder method)": [[10, "category_encoders.james_stein.JamesSteinEncoder.fit_transform"]], "get_feature_names_in() (category_encoders.james_stein.jamessteinencoder method)": [[10, "category_encoders.james_stein.JamesSteinEncoder.get_feature_names_in"]], "get_feature_names_out() (category_encoders.james_stein.jamessteinencoder method)": [[10, "category_encoders.james_stein.JamesSteinEncoder.get_feature_names_out"]], "get_metadata_routing() (category_encoders.james_stein.jamessteinencoder method)": [[10, "category_encoders.james_stein.JamesSteinEncoder.get_metadata_routing"]], "get_params() (category_encoders.james_stein.jamessteinencoder method)": [[10, "category_encoders.james_stein.JamesSteinEncoder.get_params"]], "set_output() (category_encoders.james_stein.jamessteinencoder method)": [[10, "category_encoders.james_stein.JamesSteinEncoder.set_output"]], "set_params() (category_encoders.james_stein.jamessteinencoder method)": [[10, "category_encoders.james_stein.JamesSteinEncoder.set_params"]], "set_transform_request() (category_encoders.james_stein.jamessteinencoder method)": [[10, "category_encoders.james_stein.JamesSteinEncoder.set_transform_request"]], "transform() (category_encoders.james_stein.jamessteinencoder method)": [[10, "category_encoders.james_stein.JamesSteinEncoder.transform"]], "leaveoneoutencoder (class in category_encoders.leave_one_out)": [[11, "category_encoders.leave_one_out.LeaveOneOutEncoder"]], "fit() (category_encoders.leave_one_out.leaveoneoutencoder method)": [[11, "category_encoders.leave_one_out.LeaveOneOutEncoder.fit"]], "fit_transform() (category_encoders.leave_one_out.leaveoneoutencoder method)": [[11, "category_encoders.leave_one_out.LeaveOneOutEncoder.fit_transform"]], "get_feature_names_in() (category_encoders.leave_one_out.leaveoneoutencoder method)": [[11, "category_encoders.leave_one_out.LeaveOneOutEncoder.get_feature_names_in"]], "get_feature_names_out() (category_encoders.leave_one_out.leaveoneoutencoder method)": [[11, "category_encoders.leave_one_out.LeaveOneOutEncoder.get_feature_names_out"]], "get_metadata_routing() (category_encoders.leave_one_out.leaveoneoutencoder method)": [[11, "category_encoders.leave_one_out.LeaveOneOutEncoder.get_metadata_routing"]], "get_params() (category_encoders.leave_one_out.leaveoneoutencoder method)": [[11, "category_encoders.leave_one_out.LeaveOneOutEncoder.get_params"]], "set_output() (category_encoders.leave_one_out.leaveoneoutencoder method)": [[11, "category_encoders.leave_one_out.LeaveOneOutEncoder.set_output"]], "set_params() (category_encoders.leave_one_out.leaveoneoutencoder method)": [[11, "category_encoders.leave_one_out.LeaveOneOutEncoder.set_params"]], "set_transform_request() (category_encoders.leave_one_out.leaveoneoutencoder method)": [[11, "category_encoders.leave_one_out.LeaveOneOutEncoder.set_transform_request"]], "transform() (category_encoders.leave_one_out.leaveoneoutencoder method)": [[11, "category_encoders.leave_one_out.LeaveOneOutEncoder.transform"]], "transform_leave_one_out() (category_encoders.leave_one_out.leaveoneoutencoder method)": [[11, "category_encoders.leave_one_out.LeaveOneOutEncoder.transform_leave_one_out"]], "mestimateencoder (class in category_encoders.m_estimate)": [[12, "category_encoders.m_estimate.MEstimateEncoder"]], "fit() (category_encoders.m_estimate.mestimateencoder method)": [[12, "category_encoders.m_estimate.MEstimateEncoder.fit"]], "fit_transform() (category_encoders.m_estimate.mestimateencoder method)": [[12, "category_encoders.m_estimate.MEstimateEncoder.fit_transform"]], "get_feature_names_in() (category_encoders.m_estimate.mestimateencoder method)": [[12, "category_encoders.m_estimate.MEstimateEncoder.get_feature_names_in"]], "get_feature_names_out() (category_encoders.m_estimate.mestimateencoder method)": [[12, "category_encoders.m_estimate.MEstimateEncoder.get_feature_names_out"]], "get_metadata_routing() (category_encoders.m_estimate.mestimateencoder method)": [[12, "category_encoders.m_estimate.MEstimateEncoder.get_metadata_routing"]], "get_params() (category_encoders.m_estimate.mestimateencoder method)": [[12, "category_encoders.m_estimate.MEstimateEncoder.get_params"]], "set_output() (category_encoders.m_estimate.mestimateencoder method)": [[12, "category_encoders.m_estimate.MEstimateEncoder.set_output"]], "set_params() (category_encoders.m_estimate.mestimateencoder method)": [[12, "category_encoders.m_estimate.MEstimateEncoder.set_params"]], "set_transform_request() (category_encoders.m_estimate.mestimateencoder method)": [[12, "category_encoders.m_estimate.MEstimateEncoder.set_transform_request"]], "transform() (category_encoders.m_estimate.mestimateencoder method)": [[12, "category_encoders.m_estimate.MEstimateEncoder.transform"]], "onehotencoder (class in category_encoders.one_hot)": [[13, "category_encoders.one_hot.OneHotEncoder"]], "fit() (category_encoders.one_hot.onehotencoder method)": [[13, "category_encoders.one_hot.OneHotEncoder.fit"]], "fit_transform() (category_encoders.one_hot.onehotencoder method)": [[13, "category_encoders.one_hot.OneHotEncoder.fit_transform"]], "get_dummies() (category_encoders.one_hot.onehotencoder method)": [[13, "category_encoders.one_hot.OneHotEncoder.get_dummies"]], "get_feature_names_in() (category_encoders.one_hot.onehotencoder method)": [[13, "category_encoders.one_hot.OneHotEncoder.get_feature_names_in"]], "get_feature_names_out() (category_encoders.one_hot.onehotencoder method)": [[13, "category_encoders.one_hot.OneHotEncoder.get_feature_names_out"]], "get_metadata_routing() (category_encoders.one_hot.onehotencoder method)": [[13, "category_encoders.one_hot.OneHotEncoder.get_metadata_routing"]], "get_params() (category_encoders.one_hot.onehotencoder method)": [[13, "category_encoders.one_hot.OneHotEncoder.get_params"]], "inverse_transform() (category_encoders.one_hot.onehotencoder method)": [[13, "category_encoders.one_hot.OneHotEncoder.inverse_transform"]], "reverse_dummies() (category_encoders.one_hot.onehotencoder method)": [[13, "category_encoders.one_hot.OneHotEncoder.reverse_dummies"]], "set_inverse_transform_request() (category_encoders.one_hot.onehotencoder method)": [[13, "category_encoders.one_hot.OneHotEncoder.set_inverse_transform_request"]], "set_output() (category_encoders.one_hot.onehotencoder method)": [[13, "category_encoders.one_hot.OneHotEncoder.set_output"]], "set_params() (category_encoders.one_hot.onehotencoder method)": [[13, "category_encoders.one_hot.OneHotEncoder.set_params"]], "set_transform_request() (category_encoders.one_hot.onehotencoder method)": [[13, "category_encoders.one_hot.OneHotEncoder.set_transform_request"]], "transform() (category_encoders.one_hot.onehotencoder method)": [[13, "category_encoders.one_hot.OneHotEncoder.transform"]], "ordinalencoder (class in category_encoders.ordinal)": [[14, "category_encoders.ordinal.OrdinalEncoder"]], "fit() (category_encoders.ordinal.ordinalencoder method)": [[14, "category_encoders.ordinal.OrdinalEncoder.fit"]], "fit_transform() (category_encoders.ordinal.ordinalencoder method)": [[14, "category_encoders.ordinal.OrdinalEncoder.fit_transform"]], "get_feature_names_in() (category_encoders.ordinal.ordinalencoder method)": [[14, "category_encoders.ordinal.OrdinalEncoder.get_feature_names_in"]], "get_feature_names_out() (category_encoders.ordinal.ordinalencoder method)": [[14, "category_encoders.ordinal.OrdinalEncoder.get_feature_names_out"]], "get_metadata_routing() (category_encoders.ordinal.ordinalencoder method)": [[14, "category_encoders.ordinal.OrdinalEncoder.get_metadata_routing"]], "get_params() (category_encoders.ordinal.ordinalencoder method)": [[14, "category_encoders.ordinal.OrdinalEncoder.get_params"]], "inverse_transform() (category_encoders.ordinal.ordinalencoder method)": [[14, "category_encoders.ordinal.OrdinalEncoder.inverse_transform"]], "ordinal_encoding() (category_encoders.ordinal.ordinalencoder static method)": [[14, "category_encoders.ordinal.OrdinalEncoder.ordinal_encoding"]], "set_inverse_transform_request() (category_encoders.ordinal.ordinalencoder method)": [[14, "category_encoders.ordinal.OrdinalEncoder.set_inverse_transform_request"]], "set_output() (category_encoders.ordinal.ordinalencoder method)": [[14, "category_encoders.ordinal.OrdinalEncoder.set_output"]], "set_params() (category_encoders.ordinal.ordinalencoder method)": [[14, "category_encoders.ordinal.OrdinalEncoder.set_params"]], "set_transform_request() (category_encoders.ordinal.ordinalencoder method)": [[14, "category_encoders.ordinal.OrdinalEncoder.set_transform_request"]], "transform() (category_encoders.ordinal.ordinalencoder method)": [[14, "category_encoders.ordinal.OrdinalEncoder.transform"]], "polynomialencoder (class in category_encoders.polynomial)": [[15, "category_encoders.polynomial.PolynomialEncoder"]], "fit() (category_encoders.polynomial.polynomialencoder method)": [[15, "category_encoders.polynomial.PolynomialEncoder.fit"]], "fit_transform() (category_encoders.polynomial.polynomialencoder method)": [[15, "category_encoders.polynomial.PolynomialEncoder.fit_transform"]], "get_feature_names_in() (category_encoders.polynomial.polynomialencoder method)": [[15, "category_encoders.polynomial.PolynomialEncoder.get_feature_names_in"]], "get_feature_names_out() (category_encoders.polynomial.polynomialencoder method)": [[15, "category_encoders.polynomial.PolynomialEncoder.get_feature_names_out"]], "get_metadata_routing() (category_encoders.polynomial.polynomialencoder method)": [[15, "category_encoders.polynomial.PolynomialEncoder.get_metadata_routing"]], "get_params() (category_encoders.polynomial.polynomialencoder method)": [[15, "category_encoders.polynomial.PolynomialEncoder.get_params"]], "set_output() (category_encoders.polynomial.polynomialencoder method)": [[15, "category_encoders.polynomial.PolynomialEncoder.set_output"]], "set_params() (category_encoders.polynomial.polynomialencoder method)": [[15, "category_encoders.polynomial.PolynomialEncoder.set_params"]], "set_transform_request() (category_encoders.polynomial.polynomialencoder method)": [[15, "category_encoders.polynomial.PolynomialEncoder.set_transform_request"]], "transform() (category_encoders.polynomial.polynomialencoder method)": [[15, "category_encoders.polynomial.PolynomialEncoder.transform"]], "quantileencoder (class in category_encoders.quantile_encoder)": [[16, "category_encoders.quantile_encoder.QuantileEncoder"]], "fit() (category_encoders.quantile_encoder.quantileencoder method)": [[16, "category_encoders.quantile_encoder.QuantileEncoder.fit"]], "fit_transform() (category_encoders.quantile_encoder.quantileencoder method)": [[16, "category_encoders.quantile_encoder.QuantileEncoder.fit_transform"]], "get_feature_names_in() (category_encoders.quantile_encoder.quantileencoder method)": [[16, "category_encoders.quantile_encoder.QuantileEncoder.get_feature_names_in"]], "get_feature_names_out() (category_encoders.quantile_encoder.quantileencoder method)": [[16, "category_encoders.quantile_encoder.QuantileEncoder.get_feature_names_out"]], "get_metadata_routing() (category_encoders.quantile_encoder.quantileencoder method)": [[16, "category_encoders.quantile_encoder.QuantileEncoder.get_metadata_routing"]], "get_params() (category_encoders.quantile_encoder.quantileencoder method)": [[16, "category_encoders.quantile_encoder.QuantileEncoder.get_params"]], "set_output() (category_encoders.quantile_encoder.quantileencoder method)": [[16, "category_encoders.quantile_encoder.QuantileEncoder.set_output"]], "set_params() (category_encoders.quantile_encoder.quantileencoder method)": [[16, "category_encoders.quantile_encoder.QuantileEncoder.set_params"]], "set_transform_request() (category_encoders.quantile_encoder.quantileencoder method)": [[16, "category_encoders.quantile_encoder.QuantileEncoder.set_transform_request"]], "transform() (category_encoders.quantile_encoder.quantileencoder method)": [[16, "category_encoders.quantile_encoder.QuantileEncoder.transform"]], "rankhotencoder (class in category_encoders.rankhot)": [[17, "category_encoders.rankhot.RankHotEncoder"]], "fit() (category_encoders.rankhot.rankhotencoder method)": [[17, "category_encoders.rankhot.RankHotEncoder.fit"]], "fit_transform() (category_encoders.rankhot.rankhotencoder method)": [[17, "category_encoders.rankhot.RankHotEncoder.fit_transform"]], "get_feature_names_in() (category_encoders.rankhot.rankhotencoder method)": [[17, "category_encoders.rankhot.RankHotEncoder.get_feature_names_in"]], "get_feature_names_out() (category_encoders.rankhot.rankhotencoder method)": [[17, "category_encoders.rankhot.RankHotEncoder.get_feature_names_out"]], "get_metadata_routing() (category_encoders.rankhot.rankhotencoder method)": [[17, "category_encoders.rankhot.RankHotEncoder.get_metadata_routing"]], "get_params() (category_encoders.rankhot.rankhotencoder method)": [[17, "category_encoders.rankhot.RankHotEncoder.get_params"]], "set_inverse_transform_request() (category_encoders.rankhot.rankhotencoder method)": [[17, "category_encoders.rankhot.RankHotEncoder.set_inverse_transform_request"]], "set_output() (category_encoders.rankhot.rankhotencoder method)": [[17, "category_encoders.rankhot.RankHotEncoder.set_output"]], "set_params() (category_encoders.rankhot.rankhotencoder method)": [[17, "category_encoders.rankhot.RankHotEncoder.set_params"]], "set_transform_request() (category_encoders.rankhot.rankhotencoder method)": [[17, "category_encoders.rankhot.RankHotEncoder.set_transform_request"]], "transform() (category_encoders.rankhot.rankhotencoder method)": [[17, "category_encoders.rankhot.RankHotEncoder.transform"]], "sumencoder (class in category_encoders.sum_coding)": [[18, "category_encoders.sum_coding.SumEncoder"]], "fit() (category_encoders.sum_coding.sumencoder method)": [[18, "category_encoders.sum_coding.SumEncoder.fit"]], "fit_transform() (category_encoders.sum_coding.sumencoder method)": [[18, "category_encoders.sum_coding.SumEncoder.fit_transform"]], "get_feature_names_in() (category_encoders.sum_coding.sumencoder method)": [[18, "category_encoders.sum_coding.SumEncoder.get_feature_names_in"]], "get_feature_names_out() (category_encoders.sum_coding.sumencoder method)": [[18, "category_encoders.sum_coding.SumEncoder.get_feature_names_out"]], "get_metadata_routing() (category_encoders.sum_coding.sumencoder method)": [[18, "category_encoders.sum_coding.SumEncoder.get_metadata_routing"]], "get_params() (category_encoders.sum_coding.sumencoder method)": [[18, "category_encoders.sum_coding.SumEncoder.get_params"]], "set_output() (category_encoders.sum_coding.sumencoder method)": [[18, "category_encoders.sum_coding.SumEncoder.set_output"]], "set_params() (category_encoders.sum_coding.sumencoder method)": [[18, "category_encoders.sum_coding.SumEncoder.set_params"]], "set_transform_request() (category_encoders.sum_coding.sumencoder method)": [[18, "category_encoders.sum_coding.SumEncoder.set_transform_request"]], "transform() (category_encoders.sum_coding.sumencoder method)": [[18, "category_encoders.sum_coding.SumEncoder.transform"]], "summaryencoder (class in category_encoders.quantile_encoder)": [[19, "category_encoders.quantile_encoder.SummaryEncoder"]], "fit() (category_encoders.quantile_encoder.summaryencoder method)": [[19, "category_encoders.quantile_encoder.SummaryEncoder.fit"]], "fit_transform() (category_encoders.quantile_encoder.summaryencoder method)": [[19, "category_encoders.quantile_encoder.SummaryEncoder.fit_transform"]], "get_feature_names_in() (category_encoders.quantile_encoder.summaryencoder method)": [[19, "category_encoders.quantile_encoder.SummaryEncoder.get_feature_names_in"]], "get_feature_names_out() (category_encoders.quantile_encoder.summaryencoder method)": [[19, "category_encoders.quantile_encoder.SummaryEncoder.get_feature_names_out"]], "get_metadata_routing() (category_encoders.quantile_encoder.summaryencoder method)": [[19, "category_encoders.quantile_encoder.SummaryEncoder.get_metadata_routing"]], "get_params() (category_encoders.quantile_encoder.summaryencoder method)": [[19, "category_encoders.quantile_encoder.SummaryEncoder.get_params"]], "set_params() (category_encoders.quantile_encoder.summaryencoder method)": [[19, "category_encoders.quantile_encoder.SummaryEncoder.set_params"]], "set_transform_request() (category_encoders.quantile_encoder.summaryencoder method)": [[19, "category_encoders.quantile_encoder.SummaryEncoder.set_transform_request"]], "targetencoder (class in category_encoders.target_encoder)": [[20, "category_encoders.target_encoder.TargetEncoder"]], "fit() (category_encoders.target_encoder.targetencoder method)": [[20, "category_encoders.target_encoder.TargetEncoder.fit"]], "fit_transform() (category_encoders.target_encoder.targetencoder method)": [[20, "category_encoders.target_encoder.TargetEncoder.fit_transform"]], "get_feature_names_in() (category_encoders.target_encoder.targetencoder method)": [[20, "category_encoders.target_encoder.TargetEncoder.get_feature_names_in"]], "get_feature_names_out() (category_encoders.target_encoder.targetencoder method)": [[20, "category_encoders.target_encoder.TargetEncoder.get_feature_names_out"]], "get_metadata_routing() (category_encoders.target_encoder.targetencoder method)": [[20, "category_encoders.target_encoder.TargetEncoder.get_metadata_routing"]], "get_params() (category_encoders.target_encoder.targetencoder method)": [[20, "category_encoders.target_encoder.TargetEncoder.get_params"]], "set_output() (category_encoders.target_encoder.targetencoder method)": [[20, "category_encoders.target_encoder.TargetEncoder.set_output"]], "set_params() (category_encoders.target_encoder.targetencoder method)": [[20, "category_encoders.target_encoder.TargetEncoder.set_params"]], "set_transform_request() (category_encoders.target_encoder.targetencoder method)": [[20, "category_encoders.target_encoder.TargetEncoder.set_transform_request"]], "transform() (category_encoders.target_encoder.targetencoder method)": [[20, "category_encoders.target_encoder.TargetEncoder.transform"]], "woeencoder (class in category_encoders.woe)": [[21, "category_encoders.woe.WOEEncoder"]], "fit() (category_encoders.woe.woeencoder method)": [[21, "category_encoders.woe.WOEEncoder.fit"]], "fit_transform() (category_encoders.woe.woeencoder method)": [[21, "category_encoders.woe.WOEEncoder.fit_transform"]], "get_feature_names_in() (category_encoders.woe.woeencoder method)": [[21, "category_encoders.woe.WOEEncoder.get_feature_names_in"]], "get_feature_names_out() (category_encoders.woe.woeencoder method)": [[21, "category_encoders.woe.WOEEncoder.get_feature_names_out"]], "get_metadata_routing() (category_encoders.woe.woeencoder method)": [[21, "category_encoders.woe.WOEEncoder.get_metadata_routing"]], "get_params() (category_encoders.woe.woeencoder method)": [[21, "category_encoders.woe.WOEEncoder.get_params"]], "set_output() (category_encoders.woe.woeencoder method)": [[21, "category_encoders.woe.WOEEncoder.set_output"]], "set_params() (category_encoders.woe.woeencoder method)": [[21, "category_encoders.woe.WOEEncoder.set_params"]], "set_transform_request() (category_encoders.woe.woeencoder method)": [[21, "category_encoders.woe.WOEEncoder.set_transform_request"]], "transform() (category_encoders.woe.woeencoder method)": [[21, "category_encoders.woe.WOEEncoder.transform"]], "nestedcvwrapper (class in category_encoders.wrapper)": [[22, "category_encoders.wrapper.NestedCVWrapper"]], "polynomialwrapper (class in category_encoders.wrapper)": [[22, "category_encoders.wrapper.PolynomialWrapper"]], "fit() (category_encoders.wrapper.nestedcvwrapper method)": [[22, "category_encoders.wrapper.NestedCVWrapper.fit"]], "fit_transform() (category_encoders.wrapper.nestedcvwrapper method)": [[22, "category_encoders.wrapper.NestedCVWrapper.fit_transform"]], "fit_transform() (category_encoders.wrapper.polynomialwrapper method)": [[22, "category_encoders.wrapper.PolynomialWrapper.fit_transform"]], "transform() (category_encoders.wrapper.nestedcvwrapper method)": [[22, "category_encoders.wrapper.NestedCVWrapper.transform"]]}})